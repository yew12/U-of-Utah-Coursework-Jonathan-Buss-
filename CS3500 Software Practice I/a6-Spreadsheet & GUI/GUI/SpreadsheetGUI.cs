// Authors: Jonathan Gage Buss & Sanjay Gounder
using SpreadsheetGrid_Core;
using SpreadsheetUtilities;
using SS;
using System.ComponentModel;
using System.Diagnostics;

namespace GUI
{
    /// <summary>
    /// This is a partial class that contributes to the main functionalities of our spreadsheet
    /// including:
    ///     -   navigation
    ///     -   evaluating formulas
    ///     -   closing/opening
    ///     -   saving
    ///  
    /// </summary>
    public partial class SpreadsheetGUI : Form
    {
        // instance variables to keep track of our location of cursor. 
        public int col;
        public int row;

        private Spreadsheet spreadsheet;

        /// <summary>
        /// Constructor for our spreadsheet GUI
        /// </summary>
        public SpreadsheetGUI()
        {
            this.spreadsheetGridWidget1 = new SpreadsheetGridWidget();
            spreadsheet = new Spreadsheet(s => true, s => s.ToUpper(), "six");

            //Call the AutoGenerated code
            InitializeComponent();

            // references our cursorLocation() method.(Gage) 
            this.spreadsheetGridWidget1.SelectionChanged += cursorLocation;

            // changes the background color of our disabled textbox 
            cellLocation_TextBox.BackColor = Color.White;

            // changes the background color of our disabled textbox 
            value_TextBox.BackColor = Color.White;

            // setting the cell location textbox to cell "A1", the default location
            cellLocation_TextBox.Text = "A1";

            //since we disable the control for the windowsOpenDisplay, this will have the color be white
            windowsOpenDisplay.BackColor = Color.White;

            //displaying number of windows open
            windowsOpenDisplay.Text = "Spreadsheet" + SpreadsheetWindow.getAppContext().getFormCount().ToString();
        }

        /// <summary>
        /// Utilizes arrow keys to navigate around our spreadsheet grid
        /// - http://csharp.net-informations.com/gui/key-press-cs.htm
        /// </summary>
        /// <param name="msg"></param>
        /// <param name="keyData"></param>
        /// <returns></returns>
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            //capture up arrow key
            if (keyData == Keys.Up)
            {
                this.spreadsheetGridWidget1.SetSelection(col, row - 1);
                //MessageBox.Show("You pressed Up arrow key");
                return true;
            }
            //capture down arrow key
            if (keyData == Keys.Down)
            {
                this.spreadsheetGridWidget1.SetSelection(col, row + 1);
                // MessageBox.Show("You pressed Down arrow key");
                return true;
            }
            //capture left arrow key
            if (keyData == Keys.Left)
            {
                this.spreadsheetGridWidget1.SetSelection(col - 1, row);
                //MessageBox.Show("You pressed Left arrow key");
                return true;
            }
            //capture right arrow key
            if (keyData == Keys.Right)
            {
                this.spreadsheetGridWidget1.SetSelection(col + 1, row);
                //MessageBox.Show("You pressed Right arrow key");
                return true;
            }
            // if we have an enter key, we want to set the cell contents (works similar to our compute button)
            if (keyData == Keys.Enter)
            {
                // initialize background worker
                backgroundWorker2.RunWorkerAsync();
            }

            // created a hotkey, ctrl + ), which will call open
            if (keyData == (Keys.Control | Keys.O))
            {
                Open();
            }

            // created a hotkey, ctrl + S, which will call save
            if (keyData == (Keys.Control | Keys.S))
            {
                Save();
            }

            // created a hotkey, ctrl + Q, which will call close
            if (keyData == (Keys.Control | Keys.Q))
            {
                Close();
            }

            // created a hotkey, ctrl + W, which will call close
            if (keyData == (Keys.Control | Keys.W))
            {
                Close();
            }

            // created a hotkey, ctrl + H, which will call help button
            if (keyData == (Keys.Control | Keys.H))
            {
                Help();
            }

            // created a hotkey, ctrl + N, which will call help button
            if (keyData == (Keys.Control | Keys.N))
            {
                NewSpreadsheet();
            }

            return base.ProcessCmdKey(ref msg, keyData);
        }


        /// <summary>
        /// Private helper method that sets the contents of our current cell
        /// </summary>
        private void setContentsOfCurrentCell()
        {
            try
            {
                string contents = String.Empty;
                Invoke(new MethodInvoker(() => contents = contents_TextBox.Text));

                // set the contents of the cell
                IEnumerable<string> cellDependents = spreadsheet.SetContentsOfCell(colRowCellConverter(col, row),
                     contents);

                // if it is a formula error display invalid formula message
                if (spreadsheet.GetCellValue(colRowCellConverter(col, row)) is SpreadsheetUtilities.FormulaError)
                {
                    // set the cell to #INVALID - notifying the user that the formula is wrong
                    Invoke(new MethodInvoker(() => value_TextBox.Text = "#INVALID"));

                    this.spreadsheetGridWidget1.SetValue(col, row, "#INVALID");
                    evaluateChangedSpreadsheetCells(cellDependents);
                }
                else
                {
                    // set the value textbox of cell 
                    Invoke(new MethodInvoker(() =>
                    value_TextBox.Text = spreadsheet.GetCellValue(colRowCellConverter(col, row)).ToString()));
                    // set the text
                    string cell = colRowCellConverter(col, row);
                    // set the contents

                    this.spreadsheetGridWidget1.SetValue(col, row, spreadsheet.GetCellValue(cell).ToString());
                    evaluateChangedSpreadsheetCells(cellDependents);
                }

            }
            catch (FormulaFormatException)
            {
                // revert back to old cell contents if we get this exception
                Invoke(new MethodInvoker(() => contents_TextBox.Text =
                spreadsheet.GetCellContents(colRowCellConverter(col, row)).ToString()));

                // https://stackoverflow.com/questions/3036829/how-do-i-create-a-message-box-with-yes-no-choices-and-a-dialogresult
                DialogResult dialogResult = MessageBox.Show("Invalid Formula", "Spreadsheet", MessageBoxButtons.OK);
                if (dialogResult == DialogResult.OK)
                {
                    // nothing in here so we only close our message box and not the entire application
                }
            }
            catch (CircularException)
            {
                // https://stackoverflow.com/questions/3036829/how-do-i-create-a-message-box-with-yes-no-choices-and-a-dialogresult
                DialogResult dialogResult = MessageBox.Show("You have created a circular dependency exception", "Spreadsheet",
                    MessageBoxButtons.OK);
                if (dialogResult == DialogResult.OK)
                {
                    // nothing in here so we only close our message box and not the entire application
                }
            }
        }

        /// <summary>
        /// Private helper method for changing the displayed values in cells where another cell which would affect
        /// those cells values
        /// </summary>
        /// <param name="cellDependents"></param>
        private void evaluateChangedSpreadsheetCells(IEnumerable<string> cellDependents)
        {

            // loop through all the changed cells
            foreach (string cell in cellDependents)
            {
                //Gets the column and row when given a cell, ex: A1 would return A for cellColumn, and 
                //1 for row
                int cellColumn = cellToColConverter(cell);
                int cellRow = cellToRowConverter(cell);

                //Setting value at specific col, row given through the cell
                this.spreadsheetGridWidget1.SetValue(cellColumn, cellRow,
                    spreadsheet.GetCellValue(cell).ToString());
            }
        }

        /// <summary>
        /// This function give us the location of our cursor
        /// </summary>
        /// <param name="sender"></param>
        public void cursorLocation(SpreadsheetGridWidget sender)
        {
            // gets the location of our cursor
            this.spreadsheetGridWidget1.GetSelection(out int column, out int rows);
            // initialize our rows
            col = column;
            row = rows;

            // display location in cell location Textbox
            this.cellLocation_TextBox.Text = colRowCellConverter(col, row);

            // if contents is formula 
            if (spreadsheet.GetCellContents(colRowCellConverter(col, row)) is Formula)
            {
                // get the contents given cell and add an "=" in front to represent formula
                contents_TextBox.Text = "=" + spreadsheet.GetCellContents(colRowCellConverter(col, row)).ToString();
            }
            else
            {
                // get the contents given cell 
                contents_TextBox.Text = spreadsheet.GetCellContents(colRowCellConverter(col, row)).ToString();
            }

            // get the value textbox of cell 
            value_TextBox.Text = spreadsheet.GetCellValue(colRowCellConverter(col, row)).ToString();

            // Test to see if it works - used plus one to replicate the x & y axis #'s - uncomment
            Debug.WriteLine($"clicked on{col + 1},{row + 1}");
        }

        /// <summary>
        /// This is our compute button (Set contents of cell button) that 
        /// sets the contents of the given cells. 
        /// </summary>
        /// <exception cref="FormulaFormatException"> 
        ///   If any of our cells has an invalid formula, then we show a pop up message box
        ///   notifying the user. 
        /// </exception>
        /// <exception cref="CircularException"> 
        ///   If any of our cells has a circular dependency exception, then we show a pop up message box
        ///   notifying the user. 
        /// </exception>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void compute_Button_Click(object sender, EventArgs e)
        {
            backgroundWorker2.RunWorkerAsync();
        }

        /// <summary>
        /// Changes the contents_TextBox in given cell
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void contents_TextBox_TextChanged(object sender, EventArgs e)
        {
            // create a textbox object
            TextBox? box = sender as TextBox;
            // set the text
            this.spreadsheetGridWidget1.SetValue(col, row, box.Text);
        }

        /// <summary>
        /// Helper method that converts the column and row into correct cell format
        /// to be displayed in our cellLocation_TextBox
        /// </summary>
        /// <param name="col">column location</param>
        /// <param name="row">row locations</param>
        /// <returns>returns the converted string cell location</returns>
        private string colRowCellConverter(int col, int row)
        {
            // cell letter array
            string[] letterArr = {
                "A", "B", "C", "D", "E", "F", "G",
                "H", "I", "J", "K", "L", "M", "N",
                "O", "P", "Q", "R", "S", "T", "U",
                "V", "W", "X", "Y", "Z"
            };
            // returns the converted cell location
            return letterArr[col] + (row + 1);
        }

        /// <summary>
        /// converts the cell name and returns the column 
        /// </summary>
        /// <param name="cellName"></param>
        /// <returns>returns the column number to given cell name</returns>
        private int cellToColConverter(string cellName)
        {
            // cell letter array
            string[] letterArr = {
                "A", "B", "C", "D", "E", "F", "G",
                "H", "I", "J", "K", "L", "M", "N",
                "O", "P", "Q", "R", "S", "T", "U",
                "V", "W", "X", "Y", "Z"
            };
            // gets the first character
            string cellLetter = cellName.Substring(0, 1);

            // loop through letter array and if cell name contains that letter, return the index
            for (int i = 0; i < letterArr.Length - 1; i++)
            {
                // check if currLetter == letter
                if (letterArr[i].Equals(cellLetter))
                {
                    // then return the index of that letter (aka our column)
                    return i;
                }
            }

            // won't ever hit unless we pass in an invalid cell name. 
            return -1;
        }

        /// <summary>
        /// converts the cell name and returns the row
        /// </summary>
        /// <param name="cellName"></param>
        /// <returns>returns the row number to given cell name</returns>
        private int cellToRowConverter(string cellName)
        {
            // remove the character in the cellName 
            string strRow = cellName.Remove(0, 1);
            // Parse our string number 
            int.TryParse(strRow, out int rowNum);
            // return row number
            return rowNum - 1;
        }

        /// <summary>
        /// This method deals with the new spreadsheet button. It will create and open up new spreadsheets.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void NewToolStripMenuItem_Click(object sender, EventArgs e)
        {
            NewSpreadsheet();
        }

        /// <summary>
        /// Helper method for new spreadsheet. It will create and open up new spreadsheets.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void NewSpreadsheet()
        {
            // Tell the application context to run the form on the same
            // thread as the other forms.
            SpreadsheetWindow.getAppContext().RunForm(new SpreadsheetGUI());
        }

        /// <summary>
        /// Method for when you click the save button. When save is clicked, it should save the current
        /// spreadsheet to a file.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Save();
        }

        /// <summary>
        /// Private helper method that saves our file that we are currently working on. 
        /// </summary>
        private void Save()
        {
            //C# documentation -
            //https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.savefiledialog?view=windowsdesktop-6.0
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();

            //Ensures when you go to open a file, the only options shown will be .sprd or all files
            saveFileDialog1.Filter = "sprd files (*.sprd)|*.sprd|All files (*.*)|*.*";

            //Makes it so when you open, it will default to showing .sprd files
            saveFileDialog1.FilterIndex = 1;
            saveFileDialog1.RestoreDirectory = true;

            //Makes default extension .sprd
            saveFileDialog1.DefaultExt = "sprd";

            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                //Pass the FileName in and invoke spreadsheet's save method to generate a .sprd file 
                //wherever you save it
                spreadsheet.Save(saveFileDialog1.FileName);

            }
        }

        /// <summary>
        /// Method for when you click the close button. When close is clicked, it should close the window, first
        /// asking if the window is not saved if you would like to save it.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void closeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            /* Will call Form.Close(), and create FormClosingEventArgs which will then be passed into 
               the method formClosingCloserCheck */
            Close();
        }

        /// <summary>
        /// Message box that will pop up for user to see if they want to save the spreadsheet. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void checkIfWantSaved(object sender, EventArgs e)
        {
            //Will call helper method for if you want to save an unsaved spreadsheet
            CheckIfWantSave();
        }

        /// <summary>
        /// Helper method for checking if you want spreadsheet saved if it has not already been saved.
        /// </summary>
        private void CheckIfWantSave()
        {
            // https://stackoverflow.com/questions/3036829/how-do-i-create-a-message-box-with-yes-no-choices-and-a-dialogresult

            //Will open up a Message box asking if you want changes saved
            DialogResult dialogResult = MessageBox.Show("Want to save your changes to " +
                windowsOpenDisplay.Text + "?", "Spreadsheet", MessageBoxButtons.YesNo);

            if (dialogResult == DialogResult.Yes)
            {
                //Will call save if you press yes, if you press no, will close
                Save();
            }

        }

        /// <summary>
        /// Message box that will pop up for user to see if they want to save the spreadsheet. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void checkIfWantSavedFormClosed(object sender, FormClosingEventArgs e)
        {
            CheckIfWantSave();
        }


        /// <summary>
        /// Method for if you press the 'x', on the spreadsheet, essentially looking to close the form. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void formClosingCloserCheck(object sender, FormClosingEventArgs e)
        {
            //if spreadsheet has already been saved, then changed is false. Meaning you can just close the window.
            if (spreadsheet.Changed)
                checkIfWantSavedFormClosed(sender, e);
        }

        /// <summary>
        /// Open button method that will open the selected file in user's file folder
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void openToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            Open();
        }

        /// <summary>
        /// Private helper method for our open file. 
        /// </summary>
        private void Open()
        {
            if (spreadsheet.Changed)
                CheckIfWantSave();
            //Initializes fileContent and Path to empty strings
            string fileContent = string.Empty;
            string filePath = string.Empty;

            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                //Ensures when you go to open a file, the only options shown will be .sprd or all files
                openFileDialog.Filter = "sprd files (*.sprd)|*.sprd|All files (*.*)|*.*";

                //Makes it so when you open, it will default to showing .sprd files
                openFileDialog.FilterIndex = 1;
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {

                    //Read the contents of the file into a stream
                    Stream fileStream = openFileDialog.OpenFile();
                    using (StreamReader reader = new StreamReader(fileStream))
                    {
                        this.spreadsheet = new Spreadsheet(openFileDialog.FileName, s => true, s => s.ToUpper(),
                            "six");

                        //Clears spreadsheet before inputting the new spreadsheet you are opening's info
                        this.spreadsheetGridWidget1.Clear();

                        //Display values of spreadsheet being opened in the SpreadsheetGridWidget display
                        foreach (string cell in spreadsheet.GetNamesOfAllNonemptyCells())
                        {
                            //Gets the column and row when given a cell, ex: A1 would return A for cellColumn, and 
                            //1 for row
                            int cellColumn = cellToColConverter(cell);
                            int cellRow = cellToRowConverter(cell);

                            //Setting value at specific col, row given through the cell
                            this.spreadsheetGridWidget1.SetValue(cellColumn, cellRow,
                                spreadsheet.GetCellValue(cell).ToString());
                        }
                        fileContent = reader.ReadToEnd();
                    }
                }
            }
        }

        /// <summary>
        /// Text box to display the location of the cell that is clicked on
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cellLocation_TextBox_TextChanged(object sender, EventArgs e)
        {
        }

        /// <summary>
        /// Method for our value text box
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void value_TextBox_TextChanged(object sender, EventArgs e)
        {
        }

        /// <summary>
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SpreadsheetGUI_Load(object sender, EventArgs e)
        {
        }

        /// <summary>
        /// Drop menu button that calls our help private method. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void helpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help();
        }

        /// <summary>
        /// Helper method to for a written tutorial on how to utilize the spreadsheet. 
        /// </summary>
        private void Help()
        {
            MessageBox.Show("This spreadsheet has many features built into it.\n \n      First, when you open it up, you will" +
                " see an empty spreadsheet. To navigate the spreadsheet, you can click different cells, or you can" +
                " use the arrow keys to get around. \n      To edit a cell, you will need to press the contents cell" +
                " text box (the longer text box), and then you may type whatever you want in the cell. Please be" +
                " aware when typing a formula, you will need to start with an equal. If you try to create a formula" +
                " using a cell which has nothing in it, an exception will be thrown and the spreadsheet will not " +
                " allow you to create the formula. If you try to divide by zero the cell will show up with #INVALID." +
                " \n      To set the contents of a cell from what you typed, simply press the button to the right of the text" +
                " box, named 'Set Cell Contents,' or press Enter, which also evaluate the current cell. \n      When using " +
                " arrow keys or the mouse to go back to a cell you set the contents of, you will need to reset the contents" +
                " again, either pressing Enter or clicking the 'Set Cell Contents' button.\n      In the top left," +
                "there is a 'File' menu, which will have a couple options. It will have: \n   - New Spreadsheet (ctrl + n):" +
                " Creating new spreadsheet windows, which are labeled in the rightmost textbox as Spreadsheet" +
                " followed by the window number.\n   - Open (ctrl + o): Which allows you to open a .sprd file and replace" +
                " the contents of the spreadsheet window which is open. \n   - Save (ctrl + s): Which will allow you to " +
                "name and save a file as a .sprd to wherever you choose to save it to.\n   - Close (ctrl + q or ctrl + w): Which will close" +
                " the Spreadsheet window you have currently selected. If changes have been made to the spreadsheet window" +
                " selected and it has not already been saved, a prompt will pull up asking you if you would like to save." +
                "", "Spreadsheet Help", MessageBoxButtons.OK);
        }

        /// <summary>
        /// Method that invokes our background worker
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void backgroundWorker2_DoWork(object sender, DoWorkEventArgs e)
        {
            // Assign the result of the computation
            // to the Result property of the DoWorkEventArgs
            // object. This is will be available to the 
            // RunWorkerCompleted eventhandler.

            Invoke(new MethodInvoker(() => compute_Button.Enabled = false));

            setContentsOfCurrentCell();
            //this.spreadsheetGridWidget1.SetSelection(col, row + 1);
            Invoke(new MethodInvoker(() => compute_Button.Enabled = true));
        }
    }
}